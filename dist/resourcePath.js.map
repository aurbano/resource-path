{"version":3,"sources":["../src/resourcePath.js"],"names":["encodeUriQuery","val","pctEncodeSpaces","encodeURIComponent","replace","encodeUriSegment","resource","uri","params","PROTOCOL_AND_IPV6_REGEX","url","urlParams","encodedVal","protocolAndIpv6","split","forEach","param","Error","RegExp","test","isQueryParamValue","match","Object","keys","urlParam","paramInfo","p1","leadingSlashes","tail","charAt","module","exports","default"],"mappings":"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","file":"resourcePath.js","sourcesContent":["/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a\n * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per http://tools.ietf.org/html/rfc3986:\n *    query       = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * Source: https://github.com/angular/angular.js/blob/720012eab6fef5e075a1d6876dd2e508c8e95b73/src/ngResource/resource.js#L405\n */\nfunction encodeUriQuery(val, pctEncodeSpaces) {\n  return encodeURIComponent(val)\n    .replace(/%40/gi, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n}\n\n/**\n * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\n * (pchar) allowed in path segments:\n *    segment       = *pchar\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * Source: https://github.com/angular/angular.js/blob/720012eab6fef5e075a1d6876dd2e508c8e95b73/src/ngResource/resource.js#L386\n */\nfunction encodeUriSegment(val) {\n  return encodeUriQuery(val, true)\n    .replace(/%26/gi, '&')\n    .replace(/%3D/gi, '=')\n    .replace(/%2B/gi, '+');\n}\n\n/**\n * Generate a path given a URL with resource identifiers.\n * The URL should be a valid absolute/relative one, in the format of /path/to/resource\n * If identifiers are used, they will be preceded with a colon: /path/to/resource/:identifier\n * Parameters are optional, and if one is missing the rest of the path will be ignored.\n * This code has been ported from Angular's source: https://github.com/angular/angular.js/blob/720012eab6fef5e075a1d6876dd2e508c8e95b73/src/ngResource/resource.js#L420\n * @param uri Path to the resource\n * @param params Object containing {key: value} pairs for each parameter\n * @returns {*}\n */\nfunction resource(uri, params = {}) {\n  const PROTOCOL_AND_IPV6_REGEX = /^https?:\\/\\/\\[[^\\]]*][^/]*/;\n\n  let url = uri;\n  const urlParams = {};\n  let encodedVal;\n  let protocolAndIpv6 = '';\n\n  url.split(/\\W/).forEach((param) => {\n    if (param === 'hasOwnProperty') {\n      throw Error('badname', 'hasOwnProperty is not a valid parameter name.');\n    }\n    if (!(new RegExp('^\\\\d+$').test(param)) && param &&\n      (new RegExp(`(^|[^\\\\\\\\]):${param}(\\\\W|$)`).test(url))) {\n      urlParams[param] = {\n        isQueryParamValue: (new RegExp(`\\\\?.*=:${param}(?:\\\\W|$)`)).test(url),\n      };\n    }\n  });\n\n  url = url.replace(/\\\\:/g, ':');\n  url = url.replace(PROTOCOL_AND_IPV6_REGEX, (match) => {\n    protocolAndIpv6 = match;\n    return '';\n  });\n\n  Object.keys(urlParams).forEach((urlParam) => {\n    const val = params[urlParam];\n    const paramInfo = urlParams[urlParam];\n    if (typeof val !== 'undefined' && val !== null) {\n      if (paramInfo.isQueryParamValue) {\n        encodedVal = encodeUriQuery(val, true);\n      } else {\n        encodedVal = encodeUriSegment(val);\n      }\n      url = url.replace(new RegExp(`:${urlParam}(\\\\W|$)`, 'g'), (match, p1) => encodedVal + p1);\n    } else {\n      url = url.replace(new RegExp(`(/?):${urlParam}(\\\\W|$)`, 'g'), (match, leadingSlashes, tail) => {\n        if (tail.charAt(0) === '/') {\n          return tail;\n        }\n        return leadingSlashes + tail;\n      });\n    }\n  });\n\n  // strip trailing slashes and set the url (unless this behavior is specifically disabled)\n  url = url.replace(/\\/+$/, '') || '/';\n\n  url = protocolAndIpv6 + url.replace(/\\/\\\\\\./, '/.');\n\n  return url;\n}\n\nmodule.exports = resource;\nmodule.exports.default = resource;"]}